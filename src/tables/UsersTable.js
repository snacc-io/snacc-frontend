import React, { useState, useEffect, useRef } from "react";
import Axios from "axios";
import { api } from "../apiPath.js";
import "./popup.css";

function UsersTable() {
  const [SQLQuery, setSQLQeury] = useState("");
  const [queryResponse, setQueryResponse] = useState([]);

  const [userID, setUserID] = useState(0);
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");

  const [popupUserID, setPopupUserID] = useState(0);
  const [popupUsername, setPopupUsername] = useState("");
  const [popupEmail, setPopupEmail] = useState("");

  const popupBackdrop = useRef(null);
  const popup = useRef(null);

  useEffect(() => {
    Axios.get(`${api.url}/api/Users`).then((response) => {
      setQueryResponse(response.data);
    });
  }, []);

  const insertUserQuery = () => {
    Axios.post(`${api.url}/api/Users/Insert`, {
      username: username,
      email: email,
    }).then((response) => {
      if (response.data) {
        Axios.get(`${api.url}/api/Users`).then((response) => {
          setQueryResponse(response.data);
        });
        alert("successful query");
      } else alert("Failed query");
    });
  };

  const updateButton = (data) => {
    return () => {
      setPopupUserID(data.userID);
      setPopupUsername(data.username);
      setPopupEmail(data.email);
      popup.current.classList.toggle("hidden");
      popupBackdrop.current.classList.toggle("hidden");
    };
  };

  const updateQuery = (data) => {
    Axios.post(`${api.url}/api/Users/Update`, data).then((response) => {
      if (response.data.affectedRows) {
        alert("successful query");
        setQueryResponse([
          ...queryResponse.filter((val) => {
            return val.userID !== data.userID;
          }),
          data,
        ]);
        popup.current.classList.toggle("hidden");
        popupBackdrop.current.classList.toggle("hidden");
      } else alert("Failed query");
    });
  };

  const deleteQuery = (ID) => {
    return () => {
      Axios.post(`${api.url}/api/Users/Delete`, {
        userID: ID,
      }).then((response) => {
        if (response) {
          Axios.get(`${api.url}/api/Users`).then((response) => {
            setQueryResponse(response.data);
          });
          alert("successful query");
        } else alert("Failed query");
      });
    };
  };

  return (
    <div className="home__container">
      <div ref={popupBackdrop} className="hidden backdrop"></div>
      <div ref={popup} className="hidden popup">
        <label>userID:</label>
        <input
          type="text"
          className="form-control"
          placeholder={popupUserID}
          disabled
          name="userID"
          onChange={(e) => {
            setPopupUserID(e.target.value);
          }}
        />
        <label>username:</label>
        <input
          type="text"
          className="form-control"
          placeholder="username"
          name="username"
          value={popupUsername}
          onChange={(e) => {
            setPopupUsername(e.target.value);
          }}
        />
        <label>email:</label>
        <input
          type="text"
          className="form-control"
          placeholder="email"
          name="email"
          value={popupEmail}
          onChange={(e) => {
            setPopupEmail(e.target.value);
          }}
        />
        <div>
          <button
            onClick={() => {
              updateQuery({
                userID: popupUserID,
                username: popupUsername,
                email: popupEmail,
              });
            }}
          >
            Confirm
          </button>
          <button
            onClick={() => {
              popup.current.classList.toggle("hidden");
              popupBackdrop.current.classList.toggle("hidden");
            }}
          >
            Cancel
          </button>
        </div>
      </div>
      <form>
        <div className="container table-responsive home__container my-5">
          <table className="table ">
            <thead>
              <tr>
                <th>userID</th>
                <th>username</th>
                <th>email</th>
                <th>new entry</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="autogenerated"
                    disabled
                    name="userID"
                    onChange={(e) => {
                      setUserID(e.target.value);
                    }}
                  />
                </td>
                <td>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="username"
                    name="username"
                    onChange={(e) => {
                      setUsername(e.target.value);
                    }}
                  />
                </td>
                <td>
                  <input
                    type="text"
                    className="form-control"
                    placeholder="email"
                    name="email"
                    onChange={(e) => {
                      setEmail(e.target.value);
                    }}
                  />
                </td>
                <td>
                  <button
                    type="button"
                    className="btn btn-primary"
                    data-dismiss="modal"
                    onClick={insertUserQuery}
                  >
                    Add
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </form>

      <div class="container table-responsive home__container my-5">
        <table class="table table-bordered">
          <thead>
            <tr>
              <th>userID</th>
              <th>username</th>
              <th>email</th>
            </tr>
          </thead>
          <tbody>
            {queryResponse.map((user) => {
              return (
                <tr>
                  <td>{user.userID}</td>
                  <td>{user.username}</td>
                  <td>{user.email}</td>
                  <td>
                    <button
                      type="button"
                      className="btn btn-secondary"
                      data-dismiss="modal"
                      onClick={updateButton(user)}
                    >
                      Update
                    </button>
                    <button
                      type="button"
                      className="btn btn-danger"
                      data-dismiss="modal"
                      onClick={deleteQuery(user.userID)}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
}

export default UsersTable;

import React, { useState, useEffect, useRef } from 'react'
import Axios from "axios"
import { api } from "../apiPath.js"
import "./popup.css";



function IngredientsTable() {


  const [SQLQuery, setSQLQeury] = useState("");
  const [queryResponse, setQueryResponse] = useState([]);

  const [ingredientID, setIngredientID] = useState(0);
  const [ingredientName, setIngredientName] = useState("");

  const [popupIngredientID, setPopupIngredientID] = useState(0);
  const [popupIngredientName, setPopupIngredientName] = useState("");

  const popupBackdrop = useRef(null);
  const popup = useRef(null);

  useEffect(() => {
      Axios.get(`${api.url}/api/Ingredients`).then((response) => {
      setQueryResponse(response.data);
    });
  }, []);


  const insertIngredientQuery = () => {
    Axios.post(`${api.url}/api/Ingredients/Insert`, {
      ingredientName: ingredientName,
    }).then((response) => {
      if (response.data) {
        Axios.get(`${api.url}/api/Ingredients`).then((response) => {
          setQueryResponse(response.data);
        });
        alert("successful query");
        
      } else alert("Failed query");
    });
  };

  const updateButton = (data) => {
    return () => {
      setPopupIngredientID(data.ingredientID);
      setPopupIngredientName(data.ingredientName);
      popup.current.classList.toggle("hidden");
      popupBackdrop.current.classList.toggle("hidden");
    };
  };

  const updateQuery = (data) => {
    Axios.post(`${api.url}/api/Ingredients/Update`, data).then((response) => {
      if (response.data.affectedRows) {
        alert("successful query");
        setQueryResponse([
          ...queryResponse.filter((val) => {
            return val.ingredientID !== data.ingredientID;
          }),
          data,
        ]);
        document.getElementsByName("ingredientID")[0].value = data.ingredientID;
        popup.current.classList.toggle("hidden");
        popupBackdrop.current.classList.toggle("hidden");
      } else alert("Failed query");
    });
  };

  const deleteQuery = (ID) => {
    return () => {
      Axios.post(`${api.url}/api/Ingredients/Delete`, {
        ingredientID: ID,
      }).then((response) => {
        if (response) {
          Axios.get(`${api.url}/api/Ingredients`).then((response) => {
            setQueryResponse(response.data);
          });
          alert("successful query");
        } else alert("Failed query");
      });
    };
  };



    return (
   <div className="home__container">
      
      {/* Update popup */}
      <div ref={popupBackdrop} className="hidden backdrop"></div>
      <div ref={popup} className="hidden popup">
        <label>ingredientID:</label>
        <input
          type="text"
          className="form-control"
          placeholder={popupIngredientID}
          disabled
          name="ingredientID"
          onChange={(e) => {
            setIngredientID(e.target.value);
          }}
        />
        <label>ingredientName:</label>
        <input
          type="text"
          className="form-control"
          placeholder="ingredientName"
          name="ingredientName"
          value={popupIngredientName}
          onChange={(e) => {
            setPopupIngredientName(e.target.value);
          }}
        />
        
        <div>
          <button
            onClick={() => {
              updateQuery({
                ingredientID: popupIngredientID,
                ingredientName: popupIngredientName,
              });
            }}
          >
            Confirm
          </button>
          <button
            onClick={() => {
              popup.current.classList.toggle("hidden");
              popupBackdrop.current.classList.toggle("hidden");
            }}
          >
            cancel
          </button>
        </div>
      </div>

    <form>
    <div className="container table-responsive home__container my-5">
    <table className="table ">
        <thead>
        <tr>
            <th>ingredientID</th>
            <th>ingredientName</th>
            <th>new entry</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td><input
                type="text"
                className="form-control"
                placeholder="autogenerated"
                name="ingredientID"
                disabled
                onChange={(e) => {
                  setIngredientID(e.target.value);
                }}
              /></td>
            <td><input
                type="text"
                className="form-control"
                placeholder="ingredientName"
                name="ingredientName"
                onChange={(e) => {
                  setIngredientName(e.target.value);
                }}
              /></td>
            <td><button 
                  type="button" 
                  className="btn btn-primary" 
                  data-dismiss="modal"
                  onClick={insertIngredientQuery}
                  >
                    Add
                  </button></td>
        </tr>
        </tbody>
    </table>
    </div>
    </form>

        <div class="container table-responsive home__container my-5">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>ingredientID</th>
                <th>ingredientName</th>
              </tr>
            </thead>
            <tbody>
            {queryResponse.map((ingredient) => {
                return (
                  <tr>
                    <td>{ingredient.ingredientID}</td>
                    <td>{ingredient.ingredientName}</td>
                    <td>
                    <button
                      type="button"
                      className="btn btn-secondary"
                      data-dismiss="modal"
                      name={`Update${ingredient.ingredientID}`}
                      onClick={updateButton(ingredient)}
                    >
                      Update
                    </button>

                    <button 
                      type="button" 
                      className="btn btn-danger" 
                      data-dismiss="modal"
                      onClick={deleteQuery(ingredient.ingredientID)}
                      >
                        Delete
                     </button>
                     </td>
                     
                  </tr>

                );
              })}
              
            </tbody>
          </table>
        </div>
      </div>
    )
}

export default IngredientsTable
